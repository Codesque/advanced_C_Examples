AdemBerkYuksel@LAPTOP-V2T915IT MINGW64 ~/BTUDataStructures/004_CompilingC
$ vi filename.i
// preprocessed output is stored in filename.i 

# 1 "filename.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "filename.c"

# 1 "C:/Program Files/CodeBlocks/MinGW/x86_64-w64-mingw32/include/stdio.h" 1 3
# 9 "C:/Program Files/CodeBlocks/MinGW/x86_64-w64-mingw32/include/stdio.h" 3
# 1 "C:/Program Files/CodeBlocks/MinGW/x86_64-w64-mingw32/include/crtdefs.h" 1 3
# 10 "C:/Program Files/CodeBlocks/MinGW/x86_64-w64-mingw32/include/crtdefs.h" 3
# 1 "C:/Program Files/CodeBlocks/MinGW/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 12 "C:/Program Files/CodeBlocks/MinGW/x86_64-w64-mingw32/include/_mingw.h" 3
# 1 "C:/Program Files/CodeBlocks/MinGW/x86_64-w64-mingw32/include/_mingw_mac.h" 1 3 

// CTRL + Z'ed to exit 


AdemBerkYuksel@LAPTOP-V2T915IT MINGW64 ~/BTUDataStructures/004_CompilingC
$ vi filename.s
// after the complation of filename.i , intermediate compiled output file named filename.s is produced 
// This file is in assembly level instructions 


        .file   "filename.c"
        .text
        .def    __main; .scl    2;      .type   32;     .endef
        .section .rdata,"dr"
.LC0:
        .ascii "Addition is: %d\12\0"
        .text
        .globl  main
        .def    main;   .scl    2;      .type   32;     .endef
        .seh_proc       main
main:
        pushq   %rbp

AdemBerkYuksel@LAPTOP-V2T915IT MINGW64 ~/BTUDataStructures/004_CompilingC
$ vi filename.o
// Assembler take the assembly-level instructions from filename.s as an input and Convert the  code to machine Language and outputs into filename.o .
// This file contain machine-level instructions . 
// At this phase , only existing code is converted into machine language , the function calls like printf() are not resolved 


d<86>^G^@^@^@^@^@ ^B^@^@^T^@^@^@^@^@^D^@.text^@^@^@^@^@^@^@^@^@^@^@@^@^@^@,^A^@^@ä^A^@^@^@^@^@^@^C^@^@^@ ^@P`.data^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@@^@PÀ.bss^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@<80>^@PÀ.rdata^@^@^@^@^@^@^@^@^@^@ ^@^@^@l^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@@^@P@.xdata^@^@^@^@^@^@^@^@^@^@^L^@^@^@<8c>^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@@^@0@.pdata^@^@^@^@^@^@^@^@^@^@^L^@^@^@<98>^A^@^@^B^B^@^@^@^@^@^@^C^@^@^@@^@0@/4^@^@^@^@^@^@^@^@^@^@^@^@^@^@@^@^@^@¤^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@@^@P@UH<89>åH<83>ì0è^@^@^@^@ÇEü^E^@^@^@ÇEø^D^@^@^@<8b>Uü<8b>Eø^AÐ<89>ÂH<8d>^M^@^@^@^@è^@^@^@^@¸^@^@^@^@H<83>Ä0]Ã<90><90><90><90>Addition is: %d
^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^A^H^C^E^HR^D^C^AP^@^@^@^@^@^@<^@^@^@^@^@^@^@GCC: (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0^@^@ ^@^@^@^R^@^@^@^D^@(^@^@^@
^@^@^@^D^@-^@^@^@^S^@^@^@^D^@^@^@^@^@^D^@^@^@^C^@^D^@^@^@^D^@^@^@^C^@^H^@^@^@^L^@^@^@^C^@.file^@^@^@^@^@^@^@þÿ^@^@g^Afilename.c^@^@^@^@^@^@^@^@main^@^@^@^@^@^@^@^@^A^@ 
^@^B^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@.text^@^@^@^@^@^@^@^A^@^@^@^C^A<^@^@^@^C^@^@^@^@^@^@^@^@^@^@^@^@^@.data^@^@^@^@^@^@^@^B^@^@^@^C^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@.bss^@^@^@^@^@^@^@^@^C^@^@^@^C^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@.rdata^@^@^@^@^@^@^D^@^@^@^C^A^Q^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@.xdata^@^@^@^@^@^@^E^@^@^@^C^A^L^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@.pdata^@^@^@^@^@^@^F^@^@^@^C^A^L^@^@^@^C^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^O^@^@^@^@^@^@^@^G^@^@^@^C^A?^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@__main^@^@^@^@^@^@^@^@ ^@^B^@printf^@^@^@^@^@^@^@^@ ^@^B^@^Z^@^@^@.rdata$zzz^@.rdata$zzz^@


AdemBerkYuksel@LAPTOP-V2T915IT MINGW64 ~/BTUDataStructures/004_CompilingC
$ size filename.o
   text    data     bss     dec     hex filename
    184       0       0     184      b8 filename.o 

// In Linking process , all the linking of function calls with their definitions are done. Linker knows where all these functions are imp-
lemented. Linker does some extra work also, it adds some extra code to our program. which is required when the program starts and ends. 
For example , there is a code which is required for setting up the enviroment like passing command line arguments. This task can be 
easily verfied by using $size filename.o and $size fiename.exe 

    // Through these commands , we know that how output file increases from an object file to an executable file. This is because 
    extra code that linker adds to our program 

AdemBerkYuksel@LAPTOP-V2T915IT MINGW64 ~/BTUDataStructures/004_CompilingC
$ size filename.exe
   text    data     bss     dec     hex filename
   9772    2228    2432   14432    3860 filename.exe

// Note that GCC by default does dynamic linking , so printf() is dynamicly linked in program.